import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"
    def buildTypeName = ''
    // drop mips for now "mips", , "mips64"
    def androidAbis = ["armeabi", "armeabi-v7a", "x86", "arm64-v8a", "x86_64"]
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            buildTypeName = 'Release'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            buildTypeName = 'Debug'
            jniDebuggable true
        }
    }
    androidAbis.each { androidAbi ->

        task "cmakeConfigure-${androidAbi}"(type: Exec) {
            description 'Execute cmake configure & build.'
            workingDir getWorkDir(androidAbi)

            def cmd = "cmake -DBUILD_TARGET_PLATFORM=ANDROID -DCMAKE_BUILD_TYPE=" + buildTypeName + " -DANDROID_NDK=" + getNdkDir() + " -DANDROID_NATIVE_API_LEVEL=" + defaultConfig.minSdkVersion.mApiLevel + " -DBUILD_SHARED_LIBS=N -DANDROID_ABI=" + androidAbi + " ../"

            println(cmd)
            commandLine "cmake", "-DBUILD_TARGET_PLATFORM=ANDROID", "-DCMAKE_BUILD_TYPE=" + buildTypeName, "-DANDROID_NDK=" + getNdkDir(), "-DANDROID_NATIVE_API_LEVEL=" + defaultConfig.minSdkVersion.mApiLevel, "-DCMAKE_INSTALL_PREFIX=" + getWorkDir(androidAbi) + "/inst/", "-DBUILD_SHARED_LIBS=ON", "-DANDROID_ABI=" + androidAbi, "../"
        }

        task "cmakeBuild-${androidAbi}"(type: Exec, dependsOn: "cmakeConfigure-${androidAbi}") {
            description 'Execute cmake build.'
            workingDir getWorkDir(androidAbi)

            println 'cmake --build .'
            commandLine "cmake", "--build", "."
        }

        task "cmakeInstall-${androidAbi}"(type: Exec, dependsOn: "cmakeBuild-${androidAbi}") {
            description 'Execute cmake install.'
            workingDir getWorkDir(androidAbi)

            println 'cmake --build . --target install'
            commandLine "cmake", "--build", ".", "--target", "install"
        }

        task "copyNativeLibs-${androidAbi}"(type: Copy, dependsOn: "cmakeInstall-${androidAbi}") {
            description 'Copy so files.'

            from(new File(getWorkDir(androidAbi), '/inst/lib')) { include '**/*.so' }
            into new File('src/main/jni', androidAbi)
        }
    }

    task copyIncludes(type: Copy, dependsOn: androidAbis.collect { androidAbi -> "copyNativeLibs-${androidAbi}" }) {
        description 'Copy h files.'

        from(new File(getWorkDir(androidAbis.get(0)), '/inst/include/ngstore')) { include '**/*.h' }
        into new File('src/main/jni', 'include')
    }
    task copySources(type: Copy, dependsOn: copyIncludes) {
        description 'Copy c files.'

        from(new File(getWorkDir(androidAbis.get(0)), '/inst/src')) { include '**/*.c*' }
        into new File('src/main/jni', 'src')
    }
    task copyJSources(type: Copy, dependsOn: copySources) {
        description 'Copy java files.'

        from(new File(getWorkDir(androidAbis.get(0)), '/inst/')) {
            include '**/*.java'
        }
        into new File('src/main/java/com/nextgis/store')
    }
    sourceSets.main {
        jniLibs.srcDir 'src/main/libs' //set libs as .so's location instead of jniLibs
        jni.srcDirs = [] //disable automatic ndk-build call with auto-generated Android.mk
    }
    // call regular ndk-build(.cmd) script from app directory
    task ndkBuild(type: Exec, dependsOn: copyJSources) {
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            commandLine getNdkDir() + 'ndk-build.cmd', '-C', file('src/main').absolutePath
        } else {
            commandLine getNdkDir() + '/ndk-build', '-C', file('src/main').absolutePath
        }
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }
    androidAbis.each { androidAbi ->
        task "cleanNative-${androidAbi}"(type: Exec) {
            workingDir getWorkDir(androidAbi)
            commandLine 'cmake', '--build', '.', '--target', 'clean'
        }
    }
    clean.dependsOn androidAbis.collect { androidAbi -> "cleanNative-${androidAbi}" }
    productFlavors {
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")
    return ndkdir
}

def getWorkDir(String abi) {
    def libngmapfolder = 'libngmap'
    def folder = project.file( libngmapfolder + '/build-' + abi + '/inst' )
    if( !folder.exists() ) {
        // Create all folders up-to and including build
        folder.mkdirs()
    }

    return folder.parent
}
